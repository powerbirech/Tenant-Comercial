import os
import argparse
import glob
import json
from utils import *
from gateway_utils import (
    take_ownership,
    bind_to_gateway,
    schedule_refresh,
    create_public_link
)

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("--config-file", default="./config-isv.json")
parser.add_argument("--tenant", default=None)

args = parser.parse_args()

current_file = __file__
current_folder = os.path.dirname(current_file)
src_folder = os.path.join(current_folder, "..", "src")

config = read_pbip_jsonfile(args.config_file)
semanticmodel_src = f"{src_folder}/semanticmodels/Comercial"
reports_src = [f"{src_folder}/reports/Comercial"]

config_environments = config.items()
tenant_arg = args.tenant

for key, value in config_environments:
    if tenant_arg is not None and key.casefold() != tenant_arg.casefold():
        continue

    print(f"üöÄ Deploying to tenant: {key}")

    capacity_name = value.get("capacity", "none")
    workspace_name = value["workspace"]
    admin_upns = value.get("adminUPNs", "").split(",")
    semanticmodel_parameters = value.get("semanticModelsParameters", {})
    database = semanticmodel_parameters.get("SqlServerDatabase")
    connection_string = semanticmodel_parameters.get("SqlConnectionString")

    atualizacao = value.get("Atualizacao", {})
    dias = atualizacao.get("dias", [])
    horarios = atualizacao.get("horarios", [])
    gateway_name = value.get("DatasourceGatewayName")
    report_name = value.get("ReportName")

    spn_secret_envname = value["spnSecret"]
    spn_secret_raw = os.getenv(spn_secret_envname)
    print("üîê Buscando vari√°vel:", spn_secret_envname)

    if spn_secret_raw is None:
        raise Exception(f"‚ùå Environment variable '{spn_secret_envname}' not found.")

    spn_client_id, spn_client_secret, spn_tenant_id = spn_secret_raw.split('|', 2)

    os.environ["FABRIC_CLIENT_ID"] = spn_client_id
    os.environ["FABRIC_CLIENT_SECRET"] = spn_client_secret
    os.environ["FABRIC_TENANT_ID"] = spn_tenant_id

    fab_authenticate_spn()

    create_workspace(workspace_name=workspace_name, capacity_name=capacity_name, upns=admin_upns)

    # Deploy semantic model
    semanticmodel_id = deploy_item(
        "src/Comercial.SemanticModel",
        workspace_name=workspace_name,
        find_and_replace={
            (r".*\.tmdl", r'Odbc\.DataSource\("dsn=.*?"'): f'Odbc.DataSource("{connection_string}"',
            (r".*\.tmdl", r'(\[Name=")(.*?)",Kind="Database"\]'): rf'\1{database}",Kind="Database"]',
        },
    )

    # Deploy reports
    for report_path in glob.glob("src/*.Report"):
        deploy_item(
            report_path,
            workspace_name=workspace_name,
            find_and_replace={
                ("definition.pbir", r"\{[\s\S]*\}"): json.dumps({
                    "version": "4.0",
                    "datasetReference": {
                        "byConnection": {
                            "connectionString": None,
                            "pbiServiceModelId": None,
                            "pbiModelVirtualServerName": "sobe_wowvirtualserver",
                            "pbiModelDatabaseName": semanticmodel_id,
                            "name": "EntityDataSource",
                            "connectionType": "pbiServiceXmlaStyleLive",
                        }
                    },
                })
            },
        )

    # P√≥s-deploy
    take_ownership(workspace_name, semanticmodel_id)
    bind_to_gateway(workspace_name, semanticmodel_id, gateway_name)
    schedule_refresh(workspace_name, semanticmodel_id, dias, horarios)

    link = create_public_link(workspace_name, report_name)

    link_info = {
        "tenant": key,
        "workspace": workspace_name,
        "report": report_name,
        "link": link
    }

    # Salvar link do tenant individual
    tenant_link_path = os.path.join(current_folder, "..", "links", f"{key}.json")
    os.makedirs(os.path.dirname(tenant_link_path), exist_ok=True)
    with open(tenant_link_path, "w", encoding="utf-8") as f:
        json.dump([link_info], f, indent=4)
    print(f"‚úÖ Link salvo em: {tenant_link_path}")

    run_fab_command("auth logout")
